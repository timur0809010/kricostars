import logging
from aiogram import Bot, Dispatcher, executor, types
import config as cfg
import markups as nav
from db import Database

logging.basicConfig(level=logging.INFO)

bot = Bot(token=cfg.TOKEN)
dp = Dispatcher(bot)
db = Database('database.db')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscriptions(user_id):
    for channel in cfg.CHANNELS:
        try:
            user = await bot.get_chat_member(chat_id=channel, user_id=user_id)
            if user.status not in ['member', 'administrator', 'creator']:
                return False
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {channel}: {e}")
            return False
    return True

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"
@dp.message_handler(lambda message: message.text == "‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è")
async def check_subscription_again(message: types.Message):
    if await check_subscriptions(message.from_user.id):
        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –ú–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.", reply_markup=nav.mainMenu)
    else:
        channels_text = "\n".join([f"üëâ {channel}" for channel in cfg.CHANNELS])
        await message.answer(
            f"‚ùó –¢—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã. –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å–µ –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑:\n\n{channels_text}",
            reply_markup=nav.checkSubMenu
        )

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if not await check_subscriptions(message.from_user.id):
        channels_text = "\n".join([f"üëâ {channel}" for channel in cfg.CHANNELS])
        await message.answer(
            f"‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã:\n\n{channels_text}",
            reply_markup=nav.checkSubMenu
        )
        return

    if message.chat.type == 'private':
        if not db.user_exists(message.from_user.id):
            start_command = message.text
            referrer_id = None

            if len(start_command) > 7:
                referrer_id = start_command[7:]

                if referrer_id == str(message.from_user.id):
                    await bot.send_message(message.from_user.id, "‚ö†Ô∏è –ù–µ–ª—å–∑—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ!")
                    return

                db.add_user(message.from_user.id, referrer_id)
                db.add_balance(referrer_id, 1)
                try:
                    await bot.send_message(referrer_id, "üéâ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!")
                except:
                    logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É")
            else:
                db.add_user(message.from_user.id)

            await bot.send_message(message.from_user.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=nav.mainMenu)
        else:
            await bot.send_message(message.from_user.id, "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", reply_markup=nav.mainMenu)

# –ö–Ω–æ–ø–∫–∞ "–ë–∞–ª–∞–Ω—Å"
@dp.message_handler(lambda message: message.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def balance_button(message: types.Message):
    if not await check_subscriptions(message.from_user.id):
        channels_text = "\n".join([f"üëâ {channel}" for channel in cfg.CHANNELS])
        await message.answer(
            f"‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã:\n\n{channels_text}",
            reply_markup=nav.checkSubMenu
        )
        return

    bal = db.get_balance(message.from_user.id)
    await bot.send_message(message.from_user.id, f"‚≠ê –£ —Ç–µ–±—è {bal} TG Stars")

# –ö–Ω–æ–ø–∫–∞ "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@dp.message_handler(lambda message: message.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def referral_stats_button(message: types.Message):
    if not await check_subscriptions(message.from_user.id):
        channels_text = "\n".join([f"üëâ {channel}" for channel in cfg.CHANNELS])
        await message.answer(
            f"‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã:\n\n{channels_text}",
            reply_markup=nav.checkSubMenu
        )
        return

    ref_count = db.get_referral_count(message.from_user.id)
    await bot.send_message(message.from_user.id, f"üë• –¢—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª {ref_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.")

# –ö–Ω–æ–ø–∫–∞ "–ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"
@dp.message_handler(lambda message: message.text == "üîó –ú–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
async def referral_link(message: types.Message):
    if not await check_subscriptions(message.from_user.id):
        channels_text = "\n".join([f"üëâ {channel}" for channel in cfg.CHANNELS])
        await message.answer(
            f"‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã:\n\n{channels_text}",
            reply_markup=nav.checkSubMenu
        )
        return

    user_id = message.from_user.id
    referral_link = f"https://t.me/{cfg.BOT_USERNAME}?start={user_id}"
    await bot.send_message(message.from_user.id, f"–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}")

# –ö–Ω–æ–ø–∫–∞ "–í—ã–≤–æ–¥"
@dp.message_handler(lambda message: message.text == "üí∏ –í—ã–≤–æ–¥")
async def withdrawal_button(message: types.Message):
    if not await check_subscriptions(message.from_user.id):
        channels_text = "\n".join([f"üëâ {channel}" for channel in cfg.CHANNELS])
        await message.answer(
            f"‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã:\n\n{channels_text}",
            reply_markup=nav.checkSubMenu
        )
        return

    bal = db.get_balance(message.from_user.id)
    if bal < 15:
        await bot.send_message(message.from_user.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞!")
        return

    await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞: 15, 25 –∏–ª–∏ 50 TG Stars.", reply_markup=nav.withdrawalMenu())

# –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥
@dp.message_handler(lambda message: message.text in ["15", "25", "50"])
async def request_withdrawal(message: types.Message):
    if not await check_subscriptions(message.from_user.id):
        channels_text = "\n".join([f"üëâ {channel}" for channel in cfg.CHANNELS])
        await message.answer(
            f"‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã:\n\n{channels_text}",
            reply_markup=nav.checkSubMenu
        )
        return

    withdrawal_amount = int(message.text)
    bal = db.get_balance(message.from_user.id)

    if withdrawal_amount > bal:
        await bot.send_message(message.from_user.id, "‚ùå –£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞!")
        return

    if not message.from_user.username:
        await bot.send_message(message.from_user.id, "‚ö†Ô∏è –£ —Ç–µ–±—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username, —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞.")
        return

    db.add_balance(message.from_user.id, -withdrawal_amount)

    withdrawal_message = f"üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n–°—É–º–º–∞: {withdrawal_amount} TG Stars"
    await bot.send_message(cfg.ADMIN_ID, withdrawal_message)

    await bot.send_message(message.from_user.id, f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {withdrawal_amount} TG Stars –ø—Ä–∏–Ω—è—Ç–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")

# –ê–¥–º–∏–Ω: –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–≤–æ–¥
@dp.message_handler(lambda message: message.from_user.id == cfg.ADMIN_ID and message.text == "üìã –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–≤–æ–¥")
async def admin_withdrawal_requests(message: types.Message):
    await bot.send_message(message.from_user.id, "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–≤–æ–¥ –∑–¥–µ—Å—å.")

if __name__ == '__main__':
    logging.info("Starting bot...")
    executor.start_polling(dp, skip_updates=True)
